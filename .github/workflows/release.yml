name: Create Release

on:
  push:
    branches:
    - main
    tags:
      - 'v*' # Triggers on any tag starting with 'v' (e.g., v1.0.0)


# Set permissions for the workflow
permissions:
  contents: write  # This allows pushing to the repository
  packages: write  # If you need to publish packages
  pull-requests: write  # If you need to create PRs

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
      - name: Extract release notes
        id: extract_notes
        run: |
          # Extract changelog section for this version if available
          if [ -f CHANGELOG.md ]; then
            NOTES=$(awk -v ver=$VERSION '/^## \['$VERSION'\]/{flag=1;next}/^## \[/{flag=0}flag' CHANGELOG.md)
            if [ -z "$NOTES" ]; then
              NOTES="Release version $VERSION"
            fi
          else
            NOTES="Release version $VERSION"
          fi
          echo "NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create formulas for this version
        run: |
          # Get new checksums for the binaries
          INTEL_URL="https://binaries.dl.tetrate.io/public/raw/versions/darwin-amd64-$VERSION/tctl"
          ARM_URL="https://binaries.dl.tetrate.io/public/raw/versions/darwin-arm64-$VERSION/tctl"
          
          mkdir -p /tmp/tctl-checksums
          curl -s -L -o /tmp/tctl-checksums/tctl-intel "$INTEL_URL" 
          curl -s -L -o /tmp/tctl-checksums/tctl-arm "$ARM_URL"
          
          INTEL_SHA=$(shasum -a 256 /tmp/tctl-checksums/tctl-intel | cut -d ' ' -f 1)
          ARM_SHA=$(shasum -a 256 /tmp/tctl-checksums/tctl-arm | cut -d ' ' -f 1)
          
          # 1. Update the main formula
          sed -i 's/version "[0-9]\+\.[0-9]\+\.[0-9]\+"/version "'$VERSION'"/g' Formula/tctl.rb
          sed -i 's/sha256 "[a-f0-9]\{64\}" # Intel/sha256 "'$INTEL_SHA'" # Intel/g' Formula/tctl.rb
          sed -i 's/sha256 "[a-f0-9]\{64\}" # ARM/sha256 "'$ARM_SHA'" # ARM/g' Formula/tctl.rb
          
          # 2. Create versioned formula
          mkdir -p Formula/Versions
          
          # Format version for class name using Homebrew's versioned formula convention
          VERSION_NO_DOTS=$(echo $VERSION | tr -d '.')
          
          cat > Formula/Versions/tctl@$VERSION.rb << EOF
          class TctlAT${VERSION_NO_DOTS} < Formula
            desc "Tetrate Service Bridge Command Line Interface ${VERSION}"
            homepage "https://docs.tetrate.io/service-bridge/reference/cli/guide/"
            version "${VERSION}"
            license "Commercial"
            conflicts_with "tctl", because: "Provides the same binary"
          
            if Hardware::CPU.intel?
              url "https://binaries.dl.tetrate.io/public/raw/versions/darwin-amd64-${VERSION}/tctl"
              sha256 "${INTEL_SHA}" # Intel
            else
              url "https://binaries.dl.tetrate.io/public/raw/versions/darwin-arm64-${VERSION}/tctl"
              sha256 "${ARM_SHA}" # ARM
            end
          
            def install
              bin.install "tctl" => "tctl-${VERSION}"
              bin.install_symlink "tctl-${VERSION}" => "tctl@${VERSION}"
            end
          
            test do
              assert_match version.to_s, shell_output("\#{bin}/tctl@${VERSION} version 2>&1")
            end
          end
          EOF
          
      - name: Commit formula updates
        run: |
          git diff
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          
          # Get the default branch (usually main or master)
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          
          # Save the updated formula content to temp files to prevent loss during checkout
          mkdir -p /tmp/formula-updates
          if [ -f "Formula/tctl.rb" ]; then
            cp Formula/tctl.rb /tmp/formula-updates/
          fi
          if [ -f "Formula/Versions/tctl@$VERSION.rb" ]; then
            cp "Formula/Versions/tctl@$VERSION.rb" /tmp/formula-updates/
          fi
          
          # Force checkout the default branch (this will discard any changes)
          git fetch origin $DEFAULT_BRANCH
          git checkout -f -B $DEFAULT_BRANCH origin/$DEFAULT_BRANCH
          
          # Recreate the formula updates
          if [ -f "/tmp/formula-updates/tctl.rb" ]; then
            cp /tmp/formula-updates/tctl.rb Formula/tctl.rb
          fi
          
          # Ensure the Versions directory exists
          mkdir -p Formula/Versions
          
          # Copy back the versioned formula if it exists
          if [ -f "/tmp/formula-updates/tctl@$VERSION.rb" ]; then
            cp "/tmp/formula-updates/tctl@$VERSION.rb" "Formula/Versions/tctl@$VERSION.rb"
          fi
          
          # Now make your changes and commit them
          git add Formula/tctl.rb Formula/Versions/tctl@$VERSION.rb
          git commit -m "Update formulas for version $VERSION"
          git push origin $DEFAULT_BRANCH
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          body: |
            To install this release:
            ```
            # Latest version
            brew tap tetrateio/tctl
            brew install tetrateio/tctl/tctl
            
            # This specific version
            brew tap tetrateio/tctl
            brew install tetrateio/tctl/tctl@${{ env.VERSION }}
            ```
            
            ${{ env.NOTES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
